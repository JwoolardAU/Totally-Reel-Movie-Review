@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<nav class="nav2">
	<ul class="list-unstyled components">
		<li><a href="/MovieList#Suspense">Suspense </a></li>
		<li><a href="/MovieList#RomCom">RomCom</a></li>
		<li><a href="/MovieList#Horror">Horror</a></li>
		<li><a href="/MovieList#Action">Action</a></li>
		<li><a href="/MovieList#SciFi">SciFi</a></li>
		<li><a href="/MovieList#Drama"> Drama </a></li>
		<li><a href="/MovieList#Romance"> Romance </a></li>
		<li><a href="/MovieList#Thriller"> Thriller </a></li>
		<li><a href="/MovieList#Documentary"> Documentary </a></li>
		<li><a href="/MovieList#Adventure">Adventure</a></li>
		<li><a href="/MovieList#Musical"> Musical</a></li>
		<li><a href="/MovieList#Mystery"> Mystery </a></li>
		<li><a href="/MovieList#Comedy">Comedy</a></li>
		<li><a href="/MovieList#Sport"> Sport</a></li>
		<li><a href="/MovieList#ShortFilm"> Short Film </a></li>
	</ul>
</nav>

@{//This code block does the average review and sorting calculations for the index page
   var highestReviewed = new List<(string, string, int)>();
   var lolXDsoRandom = new List<(string, string, int)>();
   double avg = 0;
   double rating = 0;
   int nullcount = 0;
   int notSameMovies = 0;
   bool noReviews = true;
   foreach(var movie in Model.Movies)
   {
      foreach (var rev in Model.Reviews)
      {
         if(rev.Movie_Id == movie.Id)
         {
            if(rev.Rating != null)
            {
               Double.TryParse(rev.Rating, out rating);
               avg += rating;
               noReviews = false;
            }
            else
            {
               nullcount ++;
            }
         }
         else
            notSameMovies++;
      }
      if(Model.Reviews.Count() - nullcount - notSameMovies != 0)
         avg /= (Model.Reviews.Count() - nullcount - notSameMovies);
      else
         avg = 0;
      nullcount = 0;
      notSameMovies = 0;
      if(!noReviews)
         highestReviewed.Add((movie.Title, Math.Abs(avg).ToString(), movie.Id));
      lolXDsoRandom.Add((movie.Title, Math.Abs(avg).ToString(), movie.Id));
      avg = 0;
      noReviews = true;

   }
   highestReviewed = highestReviewed.OrderByDescending (t => t.Item2).ToList();
   lolXDsoRandom = lolXDsoRandom.OrderBy(a => Guid.NewGuid()).ToList();

   var mostReviewed = new List<(string, string, int)>();
   int reviewCount = 0;
   int listLength = 0;
   foreach(var movie in Model.Movies)
   {
      foreach (var rev in Model.Reviews)
      {
         if(rev.Movie_Id == movie.Id)
         {
            reviewCount++;
         }
      }
      
      if(reviewCount != 0){
         mostReviewed.Add((movie.Title, reviewCount.ToString(), movie.Id));
         listLength++;
      }

      reviewCount = 0;
      
      
   }
   mostReviewed = mostReviewed.OrderByDescending (t => t.Item2).ToList();

}

<div id="Welcome">
	<main role="main">
		<div class="row">
			<div class="col ">
				<div class="col title">
					<h1>TOTALLY REEL </h1>
					<h2>MOVIE REVIEW</h2> </div>
               <div class="row">
                  <div class="col">
                     <div class="swiper-container">
                        <div class="swiper-wrapper"> 
                           @{ int slideNum = 1; 
                              string slideNumString = null; 
                              string srcString = null; 
                           } 
                           @foreach (var movie in Model.Movies) { 
                              {slideNumString = slideNum.ToString(); 
                              srcString = @movie.Title + ".png"; }
                              <div class="swiper-slide flip-card">
                                 <a href="MovieTemplate?id=@movie.Id">
                                    <div class="flip-card-inner">
                                       <div class="flip-card-front "> <img src="~/images/@srcString" alt="slide @slideNumString"> </div>
                                       <div class="flip-card-back" style="margin:0 text-align: center;">
                                          <h3>@movie.Title</h3> <b>Age Rating:</b> @movie.Age_Rating &nbsp; &nbsp; &nbsp; <b>Genre:</b> @movie.Genre
                                          <br>
                                          <br>
                                          <p>@movie.Details</p>
                                       </div>
                                    </div>
                                 </a>
                              </div> {slideNum++;} 
                              }
                           </div>
                        <div class="swiper-button-prev"></div>
                        <div class="swiper-button-next"></div>
                     </div>

					<div class="row lists .col-container">
							<div class="col rank">
								<h2> <div class="ranking">Top 10 Movies</div> </h2>
								<ul>
									@for(int i = 0; i < 10 && i < highestReviewed.Count; i++)
                           {
                              <li><a href = "MovieTemplate?id=@highestReviewed[i].Item3"><h3>@highestReviewed[i].Item1 scores a @highestReviewed[i].Item2 out of 10! </h3></a></li>
                           }
								</ul>
							</div>
							<div class="col rank">
								<h2> <div class="ranking">Featured Films</div> </h2>
								<ul>
                           @for(int i = 0; i < 10; i++)
                           {
                              <li><a href = "MovieTemplate?id=@lolXDsoRandom[i].Item3"><h3>@lolXDsoRandom[i].Item1 </h3></a></li>
                           }
								</ul>
							</div>
							<div class="col rank">
								<h2><div class="Hottest Hits">TRMR's Most Popular</div></h2>
								<ul>
									@for(int i = 0; i < listLength; i++)
									{
										<li><a href = "MovieTemplate?id=@mostReviewed[i].Item3"><h3>@mostReviewed[i].Item1 has @mostReviewed[i].Item2 Reel Reviews!</h3></a></li>
									}
								</ul>
							</div>
						</div>
						</div>
					</div>
             </div>
		   </div>
	   </main>
	</div>